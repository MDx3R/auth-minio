name: auth-minio-tests
services:
  postgres:
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${S3__ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3__SECRET_KEY}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  alembic:
    build:
      context: .
      dockerfile: docker/Dockerfile.alembic
    env_file:
      - .env.test
    environment:
      DB_PORT: 5432
      DB_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    command: ["alembic", "upgrade", "head"]

  auth:
    build:
      context: .
      dockerfile: docker/Dockerfile
    env_file:
      - .env.test
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: ["python", "-m", "cli.services.auth"]

  tests:
    build:
      context: .
      dockerfile: docker/Dockerfile
    depends_on:
      minio:
        condition: service_healthy
      auth:
        condition: service_started
      alembic:
        condition: service_completed_successfully
    env_file:
      - .env.test
    command: ["pytest", "tests/e2e"]
